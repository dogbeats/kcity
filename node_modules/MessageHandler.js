const Event = require('Event')

class MessageHandler 
{
	constructor()
	{
		this.events = [];
	}
	
	addEventListener(eventname, callback)
	{
		var eventobj = new Event(eventname);
		eventobj.register(callback);
		this.events[eventname] = eventobj;
	}
	
	removeEventListener(eventname)
	{
		var eventobj = this.events[eventname];
		if(eventobj)
		{
			this.events.pop(eventobj);
		}
	}
	
	dispatchEvent(eventname, data)
	{
		console.log("Dispatch function called");
		var eventobj = this.events[eventname];
		if(eventobj)
		{
			/*var eventdata = 
			{
				eventname: eventname,
				data: data
			}*/
			console.log("Dispatch called");
			eventobj.fire(data);
		}
	}
	
	on(eventname, callback)//callback(data))
	{
		var eventobj = this.events[eventname];
		if(!eventobj)
		{
			this.events[eventname] = new Event(eventname);
		}
		//callback(data);
		
		eventobj.register(callback);
	}
}

module.exports = MessageHandler;